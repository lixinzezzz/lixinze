操作系统

1. 并行 vs 并发
并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。

2. 进程 vs 线程
进程是资源分配的基本单位。
线程是独立调度的基本单位。一个进程中可以有多个线程，它们共享进程资源。
区别:
a. 拥有资源
进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。
b. 调度
线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。
c. 系统开销
由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。
d. 通信方面
线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助IPC。

3. 进程状态
就绪状态：等待被调度
运行状态
阻塞状态：等待资源

4. 进程调度
先来先服务: 非抢占式的调度算法，按照请求的顺序进行调度。有些作业可能等待时间过长。
短作业优先: 非抢占式的调度算法，按估计运行时间最短的顺序进行调度。长作业有可能会饿死。
时间片轮转: 将所有就绪进程按先来先服务排成一个队列，每次调度时，把CPU间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把CPU时间分配给队首的进程。
多级反馈队列: 多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同。进程在第一个队列没执行完，就会被移到下一个队列。

5.进程同步
进程同步指进程有一定的先后执行关系。可以通过锁和信号量等互斥的方式来实现同步。

6. 进程通信
a. 管道: 通过类似文件读写的方式实现通信，一般用在父子进程之间。父进程有两个文件描述符，一个用于读，一个用于写。fork子进程后，子进程继承了这两个文件描述符。父子进程通过对文件描述符来的读写操作实现通信。管道是单向的，只允许单向通信。如果需要双向通信，那么就要采用两个管道，而每个管道向不同方向发送数据。
b. 消息队列: 消息队列可以独立于读写进程存在，读进程可以根据消息类型有选择地接收消息。
c. 信号量: 它是一个计数器，用于控制多个进程对共享数据对象的访问。
d. 共享存储: 允许多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以这是最快的一种IPC。多个进程可以将同一个文件映射到它们的地址空间从而实现共享内存。
e. 套接字: 一般用于不同机器间的进程通信。

7. 死锁必要条件
a. 互斥：每个资源要么已经分配给了一个进程，要么就是可用的。
b. 占有和等待：已经得到了某个资源的进程可以再请求新的资源。
c. 不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。
d. 环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。

8. 死锁检测和恢复
死锁检测算法是可以通过检测有向图是否存在环或者银行家算法来实现。
通过抢占，或回滚，或杀死进程恢复

9. 死锁预防
死锁预防指在程序运行之前预防发生死锁。
a. 破坏互斥条件: 例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。
b. 破坏占有和等待条件: 一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。
c. 破坏不可抢占条件
d. 破坏环路等待: 给资源统一编号，进程只能按编号顺序来请求资源。

10. 死锁避免
死锁避免指在程序运行时避免发生死锁。
通过银行家算法检查一个状态是否安全，不安全就不进入此状态

11. 虚拟内存
虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。它维护了一个物理内存到逻辑内存的映射。通过分页来实现：物理内存分成等大小的块，叫帧，逻辑内存也分成等大小的块，叫页。操作系统建立了帧和页之间的映射。虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。操作系统将内存抽象成地址空间，每个程序拥有自己的连续的地址空间，忽略了底层的硬件细节，给编程带来方便。

12. 页面置换
a. 选择换出的页面是最先进入的页面: 该算法会将那些经常被访问的页面也被换出，从而使缺页率升高。
b. 最近最久未使用

13. 分页 vs 分段
分段指将地址空间划分成固定大小的页，每一页再与内存进行映射。
区别:
a. 对程序员的透明性：分页透明，但是分段需要程序员显式划分每个段。
b. 地址空间的维度：分页是一维地址空间，分段是二维的。
c. 大小是否可以改变：页的大小不可变，段的大小可以动态改变。
d. 出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。

14. 孤儿进程
一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程。
孤儿进程将被init进程所收养，并由init进程对它们完成状态收集工作,孤儿进程不会对系统造成危害。

15. 僵尸进程
一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过wait()或waitpid()获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用wait()或waitpid()，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程。
系统所能使用的进程号是有限的，如果产生大量僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。
要消灭系统中大量的僵尸进程，只需要将其父进程杀死，此时僵尸进程就会变成孤儿进程，从而被init进程所收养，这样init进程就会释放所有的僵尸进程所占有的资源，从而结束僵尸进程。

16. 内核态 vs 用户态
内核态是操作系统管理程序执行时所处的状态，能够执行包含特权指令在内的一切指令，能够访问系统内所有的存储空间。
用户态是用户程序执行时处理器所处的状态，不能执行特权指令，只能访问用户地址空间。
用户程序运行在用户态,操作系统内核运行在内核态。

17. 用户态切换到内核态
处理器从用户态切换到内核态的方法有三种：系统调用、异常和外部中断。
a. 系统调用是操作系统的最小功能单位，是操作系统提供的用户接口，系统调用本身是一种软中断。
b. 异常，也叫做内中断，是由错误引起的，如文件损坏、缺页故障等。
c. 外部中断，是通过两根信号线来通知处理器外设的状态变化，是硬中断。



